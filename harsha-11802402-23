#include<stdio.h> 
#include<conio.h>
void r(int no,int remt[10],int cur_t,int art[10], int bst[10]);
main() 
{
	
        int Process_number,j,no,curt,remprocess,indicator,time_quan,wait,tut,art[10],bst[10],remt[10],x=1;
	indicator = 0;
	wait = 0;
	tut = 0;
	printf("Enter number of processes "); 
	scanf("%d",&no);
	remprocess = no;
               printf("\nEnter the arrival time and burst time of the processes\n");
	for(Process_number = 0;Process_number < no;Process_number++) 
	{
		printf("\nProcess P%d\n",Process_number+1);
		printf("Arrival time = "); 
		scanf("%d",&art[Process_number]);
		printf("Burst time = "); 
		scanf("%d",&bst[Process_number]); 
		remt[Process_number]=bst[Process_number]; 
	} 
	printf("the details of time quantum are as follows:\n");
	printf("the time quantum for first round is 3.\n"); 
	time_quan=3;
	curt=0;
	for(Process_number=0;remprocess!=0;) 
	{
	if(remt[Process_number]<=time_quan && remt[Process_number]>0)
		{ 
			curt+=remt[Process_number]; 
			remt[Process_number]=0; 
			indicator=1; 
		} 
		else if(remt[Process_number]>0)
		{ 
			remt[Process_number]-=time_quan; 
			curt+=time_quan; 
		} 
		if(remt[Process_number]==0 && indicator==1)			
		{ 
			printf("%d",Process_number);
			remprocess--;				
			printf("P %d",Process_number+1); 
			printf("\t\t\t%d",curt-art[Process_number]);
			printf("\t\t\t%d\n",curt-bst[Process_number]-art[Process_number]);
			wait+=curt-art[Process_number]-bst[Process_number]; 
			tut+=curt-art[Process_number]; 
			indicator=0; 
                       
		} 
		if(Process_number==no-1)
			{
			x++;
			if(x==2){
				Process_number=0;
				time_quan=6;
				printf("the time quantum for second round is 6. \n");
			}
			else
			{
				break;
			}
		}
		else if(curt >= art[Process_number+1])
		{
			Process_number++;
		}
		else
		{
			Process_number=0;
		}
	}
	r(no,remt,curt,art,bst);
	return 0;
}
void r(int no,int remt[10],int Cur_t,int art[10], int bst[10]) 
{
    float avg_wait,avg_tut;
    int i,j,n=no,temp,btime[20],Process_number[20],w_time[20],tut_t[20],total=0,loc;
     printf("third round with least burst time.\n");
    for(i=0;i<n;i++)
    {
        btime[i]=remt[i];
        w_time[i]=Cur_t-art[i]-btime[i];
		Process_number[i]=i+1;
    }
    for(i=0;i<n;i++)
    {
        loc=i;
        for(j=i+1;j<n;j++)
        {
            if(btime[j]<btime[loc]){
            	loc=j;
            }
        }
        temp=btime[i];
        btime[i]=btime[loc];
        btime[loc]=temp;
        temp=Process_number[i];
        Process_number[i]=Process_number[loc];
        Process_number[loc]=temp;
    }
     for(i=1;i<n;i++)
    {
        for(j=0;j<i;j++){
        	w_time[i]+=btime[j];
        }
        total+=w_time[i];
    }
    avg_wait=(float)total/n;
    total=0;
    printf("\nProcess\t\tBurst time\t\twaiting time\t\tturnaround time");
    for(i=0;i<n;i++)
    {
        tut_t[i]=btime[i]+w_time[i];
        total=total + tut_t[i];
        printf("\nP%d\t\t\t%d\t\t\t%d\t\t\t%d",Process_number[i],btime[i],w_time[i],tut_t[i]);
    }
    avg_tut=(float)total/n;
    printf("\n\nAverage waiting time = %f",avg_wait);
    printf("\n Average turnaround time = %f\n",avg_tut);
}
